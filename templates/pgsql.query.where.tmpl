{{define "query_table_where"}}
{{range .Fields}}
{{if primitive .Type}}
func (self *{{$.Name}}) {{.Name}}In(a ...interface{}) *oquery.Token {
    return oquery.In(self.Column("{{.NameInEncoding}}"),a...)
}

func (self *{{$.Name}}) {{.Name}}InQuery(q oquery.Query) *oquery.Token {
    return oquery.InQuery(self.Column("{{.NameInEncoding}}"),q)
}

func (self *{{$.Name}}) {{.Name}}Eq(a interface{}) *oquery.Token {
    return oquery.Eq(self.Column("{{.NameInEncoding}}"),"",a)
}

func (self *{{$.Name}}) {{.Name}}NotEq(a interface{}) *oquery.Token {
    return oquery.NotEq(self.Column("{{.NameInEncoding}}"),"",a)
}

{{if numerical .Type}}
func (self *{{$.Name}}) {{.Name}}Gt(a interface{}) *oquery.Token {
    return oquery.Gt(self.Column("{{.NameInEncoding}}"),"",a)
}

func (self *{{$.Name}}) {{.Name}}Lt(a interface{}) *oquery.Token {
    return oquery.Lt(self.Column("{{.NameInEncoding}}"),"",a)
}

func (self *{{$.Name}}) {{.Name}}GtEq(a interface{}) *oquery.Token {
    return oquery.GtEq(self.Column("{{.NameInEncoding}}"),"",a)
}

func (self *{{$.Name}}) {{.Name}}LtEq(a interface{}) *oquery.Token {
    return oquery.LtEq(self.Column("{{.NameInEncoding}}"),"",a)
}
{{end}}
{{end}}
{{end}}
{{end}}
