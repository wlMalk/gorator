{{define "model_list"}}

type {{.Name}}List []*{{.Name}}

func (self {{.Name}}List) Get() error {
    return nil
}

func (self {{.Name}}List) HasChanged() (b bool) {
    for i := range self{
        if self[i].HasChanged() {
            b = true
            break
        }
    }
    return
}

func (self {{.Name}}List) Touch() {
    for i := range self{
        self[i].Touch()
    }
}

func (self {{.Name}}List) Each(f func(int ,*{{.Name}}) error) error {
    var err error
    for i, m := range self {
        err = f(i,m)
        if err!=nil{
            return err
        }
    }
    return nil
}

func (self {{.Name}}List) EachParallel(f func(int ,*{{.Name}})error) error {
    e:=make(chan error)
    for i, m := range self {
        func(){
            e <- f(i,m)
        }()
    }
    for err := range e {
        if err!=nil{
            return err
        }
    }
    return nil
}

// SaveTX
func (self {{.Name}}List) Save() error {
    var err error
    for _, m:= range self{
        err = m.Save() // SaveTX or SaveWith
        if err!=nil{
            return err
        }
    }
    return nil
}

func (self {{.Name}}List) Load() error {
    return nil
}

func (self {{.Name}}List) LoadWith() error {
    return nil
}

func (self {{.Name}}List) Delete() error {
    return nil
}

func (self {{.Name}}List) SoftDelete() error {
    return nil
}

func (self {{.Name}}List) MarshalJSON() ([]byte, error) {
	return self.ToJSON() // apply if user wants to use stdlib
}

func (self {{.Name}}List) ToJSON() ([]byte, error) {
    var b bytes.Buffer
	var err error

	_,err = b.WriteRune('[')
	if err!=nil{
		return nil, err
	}
	for i, m:= range self{
        if i != 0{
            _,err = b.WriteRune(',')
        	if err!=nil{
        		return nil, err
        	}
        }

        mb, merr := m.ToJSON()
        if merr!=nil{
            return nil, err
        }
        _,err = b.Write(mb)
        if err!=nil{
            return nil, err
        }
    }
	_, err = b.WriteRune(']')
	if err!=nil{
		return nil, err
	}

	return b.Bytes(), nil
}

 // apply all conditions whether json, xml are used, and from where
func (self *{{.Name}}List) FromJSON(b []byte, tokens []byte, positions []int) error { // allow option to hold extra json fields
	var quotesOpened bool

	var lastOpenedBraces int // if includes structs or lists of structs
	// var lastOpenedBrackets int // if includes lists or includes structs that include lists

	var level int

	var i int

	// var key string // if list

	for i = 0; i < len(tokens); i++ {
		if tokens[i] == json.LBRACES {
			if level == 1 {
				lastOpenedBraces = i
			}
			// lastOpenedBraces = positions[i]
			level++
		} else if tokens[i] == json.RBRACES { // object
			level--
			if level == 1 { // if includes structs
				// switch key { if is struct
				// // list all structs
				// case "role":
				// 	self.Posts.FromJSON(b[positions[lastOpenedBraces]:positions[i]])
				// }
				if tokens[lastOpenedBraces-1] == json.LBRACKET || tokens[lastOpenedBraces-1] == json.COMMA {
					model := New{{.Name}}()
					err := model.FromJSON(b, tokens[lastOpenedBraces:i+1], positions[lastOpenedBraces:i+1])
					if err != nil {
						return err
					}
                    *self = append(*self, model)
				} else {
					return fmt.Errorf("JSON Decoding: invalid input")
				}
			}
		} else if tokens[i] == json.LBRACKET {
			// if level == 1 {
			// 	lastOpenedBrackets = positions[i] if includes lists
			// }
			// lastOpenedBrackets = positions[i]
			level++
		} else if tokens[i] == json.RBRACKET { // list, dont incluse if struct doesnt have struct and doesnt have lists
			level--
			// if level == 1 { // if include lists
			// 	switch key {
			// 	// list all lists
			// 	case "posts":
			// 		self.Posts.FromJSON(b[lastOpenedBraces:positions[i]])
			// 	}
			// }
		} else if tokens[i] == json.QUOTE {
			if quotesOpened { // string
				quotesOpened = false
				// if level == 1 { // if includes structs or lists of structs
				// 	if key == "" {
				// 		key = string(b[positions[i-1]:positions[i]])
				// 	} else {
				// 		switch key {
				// 		//list all strings field
				// 		case "name":
				// 			self.Name = string(b[positions[i-1]:positions[i]])
				// 		}
				// 	}
				// } else if it is a list of strings
				// v = string(b[positions[i-1]:positions[i]])
				if level == 1 {
					return fmt.Errorf("JSON Decoding: invalid input")
				}
			} else {
				quotesOpened = false
			}
		} else if level == 1 && (tokens[i] == json.COMMA || tokens[i] == json.RBRACES) && tokens[i-1] == json.COLON { // number, nil, bool
			// if level == 1 {
			// 	v := string(b[positions[i-1]+1 : positions[i]])
			// 	switch key {
			// 	// list all non string fields
			// 	case "id": // if is nullable then check for null if there is any error in parsing
			// 		vc, err := strconv.Atoi(v) // if type int
			// 		if err != nil {
			// 			return err
			// 		}
			// 		self.Id = vc
			// 	}
			// }else if it is a list of number, nulls or bools
			// v := string(b[positions[i-1]+1 : positions[i]])
			// vc, err := strconv.Atoi(v) // if type int
			// 		if err != nil {
			// 			return err
			// 		}
			return fmt.Errorf("JSON Decoding: invalid input")
		} else if (tokens[i] == json.COMMA || tokens[i] == json.RBRACES) && tokens[i-1] == json.COMMA { // number, nil, bool // only in lists
			if level == 1 { // if list of structs
				v := strings.TrimSpace(string(b[positions[i-1]+1 : positions[i]]))
				if v == "null" {
					*self = append(*self, nil)
				}
				return fmt.Errorf("JSON Decoding: invalid input")
			}
		}
	}

	return nil
}

func (self *{{.Name}}List) UnmarshalJSON(b []byte) error {
	return json.Parse(b, self)
}

func (self *{{.Name}}List) Scan(v interface{}) error {
	b, ok := v.([]byte)
	if !ok {
		return fmt.Errorf("scan source was not []byte for '%s' list", "{{.Name}}")
	}
    return json.Parse(b, self) // allow option to make it xml
}

func (self *{{.Name}}List) Populate(rows odatabase.Rower) error {
	columns, err := rows.Columns()
	if err != nil {
		return err
	}
    defer rows.Close()

    for rows.Next() {
        model := New{{.Name}}()
    	fields := model.traverseFields(columns)

    	err = rows.Scan(fields...)
        if err != nil{
            return err
        }
        *self = append(*self, model)
    }
	return nil
}

// merge lists
// find difference in lists
// find similarities
// Distinct
//

{{template "list_field_funcs" .}}

{{template "list_relations" .}}

{{end}}
